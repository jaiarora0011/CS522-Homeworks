mod IMP-PROGRAMS is including IMP-SYNTAX .
ops sumPgm collatzPgm countPrimesPgm : -> Pgm .
  ops collatzStmt multiplicationStmt primalityStmt : -> Stmt .
  eq sumPgm = (
     int n, s ;
     n = 100 ;
     while (!(n <= 0)) {
       s = s + n ;
       n = n + -1 ;
     }    ) .

  eq collatzStmt = (
     while (!(n <= 1)) {
       s = s + 1 ;  q = n / 2 ;  r = q + q + 1 ;
       if (r <= n) { n = n + n + n + 1 ; } else { n = q ; }
     }     ) .

  eq collatzPgm = (
     int m, n, q, r, s ;
     m = 10 ;
     while (!(m <= 2)) {
       n = m ;
       m = m + -1 ;
       collatzStmt
     }     ) .

  eq multiplicationStmt = (        --- fast multiplication (base 2) algorithm
     z = 0 ;
     while (!(x <= 0)) {
       q = x / 2 ;
       r = q + q + 1 ;
       if (r <= x) { z = z + y ; } else {}
       x = q ;
       y = y + y ;
     }     ) .

  eq primalityStmt = (
     i = 2 ;  q = n / i ;  t = 1 ;
     while (i <= q && 1 <= t) {
       x = i ;
       y = q ;
       multiplicationStmt
       if (n <= z) { t = 0 ; } else { i = i + 1 ;  q = n / i ; }
     }     ) .

  eq countPrimesPgm = (
     int i, m, n, q, r, s, t, x, y, z ;
     m = 10 ;  n = 2 ;
     while (n <= m) {
       primalityStmt
       if (1 <= t) { s = s + 1 ; } else {}
       n = n + 1 ;
     }     ) .

  --- Programs with increment
  op sum++Pgm : -> Pgm .
  eq sum++Pgm = {
    int m, n, s ;
    n = 100 ;
    while (++ m <= n) {
      s = s + m ;
    }
    print(s) ;
  } .

  op nondet++Pgm : -> Pgm .
  eq nondet++Pgm = {
    int x ;
    x = 1 ;
    x = ++ x / (++ x / x) ;
    print(x) ;
   } .

  --- Programs with I/O
  op sumIOPgm : -> Pgm .
  eq sumIOPgm = {
    int m, n, s ;
    n = read() ;
    while (m <= n) {
      print(m) ;
      s = s + m ;
      m = m + 1 ;
    }
    print(s) ;
  } .

  op whileIOPgm : -> Pgm .
  eq whileIOPgm = {
    int s ;
    s = 0 ;
    while (!(read() <= 0)) {
      s = s + read() ;
    }
    print(s) ;
  } .

  op nondetIOStmt : -> Stmt .
  eq nondetIOStmt = {
    print(read()
          / (read()
            / read())) ;
  } .

  --- Programs with abrupt termination
  op sumHaltPgm : -> Pgm .
  eq sumHaltPgm = {
    int m, n, s ;
    n = 100 ;  --- replace 100 by 2 in big-step SOS with abrupt termination
    while (true) {
      if (m <= n) {
        s = s + m ;
        m = m + 1 ;
      }
      else { print(s) ; halt ; }
    }
  } .

  op sumDivByZeroPgm : -> Pgm .
  eq sumDivByZeroPgm = {
    int m, n, s ;
    n = 100 ;  --- replace 100 by 2 in big-step SOS with abrupt termination
    while (true) {
      if (m <= n) {
        s = s + m ;
        m = m + 1 ;
      }
      else { print(s) ; s = s / (n / m) ; }
    }
    print(s) ;
  } .

  --- Programs with spawn
  op sumSpawnPgm : -> Pgm .
  eq sumSpawnPgm = {
    int m, n, s ;
    n = 1 ;   --- 100 may be too large for some semantics
    while (m <= n) {
      spawn {s = s + m ;}
      m = m + 1 ;
    }
    print(s) ;
  } .

  op spawnPgm : -> Pgm .
  eq spawnPgm = {
    int x ;
    {
      spawn {x = x + 1 ;}
      spawn {x = x + 10 ;}
    } --- such grouping can appear, e.g., when unrolling loops
    x = x + 100 ;
    print(x) ;
  } .

  --- programs with local declarations
  op shadow1Stmt : -> Stmt .
  eq shadow1Stmt = {
    int x ;
    x = 1 ;
    y = x ;
    int x ;
    x = 2 ;
    z = x ;
  } .

  op shadow2Stmt : -> Stmt .
  eq shadow2Stmt = {
    int x ;
    x = 1 ;
    { int x ;
      x = 2 ;
      z = x ; }
    y = x ;
  } .

  op imp++1 : -> Pgm .
  eq imp++1 = {
    int x ;
    {
      spawn {x = x + 100 ;}
      spawn {print(x) ; halt ;}
    }
    x = x + 1 ;
  }.

  ops imp++2 : -> Pgm .
  eq imp++2 = {
    int n, f, s, r, i ;
    n = read() ;
    f = 0 ;
    s = 1 ;
    if (n <= 1) {
      print(n) ;
      halt ;
    } else { }

    i = 2 ;

    while (i <= n) {
      r = f + s ;
      f = s ;
      s = r ;
      i = ++ i ;
    }
    print(r) ;
  }.
endm

mod IMP-DIV-ZERO is including IMP-SYNTAX .
  ops constDiv1 constDiv2 idDiv1 idDiv2 : -> AExp .
  ops negLeq and : -> BExp .
  ops asgn seq1 seq2 iteCond ite1 ite2 whileCond whileFalse whileTrue : -> Stmt .
  ops whilePgm : -> Pgm .

  eq constDiv1 = (2 / 0) .
  eq constDiv2 = (x / 0) .
  eq idDiv1 = (x / y) .
  eq idDiv2 = ((x / y) / (z / w)) .

  eq negLeq = (!(idDiv1 <= x)) .
  eq and = (!(x <= 2) && idDiv1 <= 10) .

  eq asgn = (x = 1 / y ;) .
  eq seq1 = (asgn x = x + 1 ;) .
  eq seq2 = (x = x + 1 ; asgn) .
  eq iteCond = (if (10 <= x / 0) {} else {} ) .
  eq ite1 = (if (true) { x = 2 ; } else { asgn } ) .
  eq ite2 = (if (false) { x = 2 ; } else { asgn } ) .
  eq whileCond = (while (x / y <= 10) { x = 2 ; } ) .
  eq whileFalse = (while (false) { asgn } ) .
  eq whileTrue = (while (true) { asgn } ) .

  eq whilePgm = {
    int n, s ;
    n = 5 ;
    while (!(n <= -1)) {
      s = s + (10 / n) ;
      n = n + -1 ;
    }
  } .

endm
mod IMP-CONFIGURATIONS-BIGSTEP is including IMP-DESUGARED-SYNTAX + STATE .
  including BUFFER .

  sort Configuration .

  --- Add an input buffer to all expression configurations
  op <_,_,_> : AExp State Buffer -> Configuration .
  op <_,_,_> : Int State Buffer -> Configuration .
  op <_,_,_> : BExp State Buffer -> Configuration .
  op <_,_,_> : Bool State Buffer -> Configuration .

  --- Denotes a division by zero
  op <`error`,_,_> : State Buffer -> Configuration . 

  --- Add an input buffer to non-result configurations holding statements
  op <_,_,_> : Stmt State Buffer -> Configuration .

  sort Signal .
  op ok : -> Signal .
  op halting : -> Signal .
  --- Add a signal to the result configuration for statement
  --- Also add input and output buffers
  op <_,_,_,_> : Signal State Buffer Buffer -> Configuration .

  --- Configurations of programs: input buffer
  op <_,_> : Pgm Buffer -> Configuration .
  --- The resulting state and the I/O buffers
  op <_,_,_> : State Buffer Buffer -> Configuration .

endm

mod IMP-SEMANTICS-BIGSTEP is including IMP-CONFIGURATIONS-BIGSTEP .
  var I I1 I2 : Int .
  var A A1 A2 : AExp .
  var B B1 B2 : BExp .
  var T : Bool .
  var Sigma Sigma1 Sigma2 Sigma' Sigma'' : State .
  var Win Win1 Win2 Win' Win'' Wout Wout1 Wout2 : Buffer .
  var X : Id .
  var P : Pgm .
  var signal : Signal .
  var S S1 S2 : Stmt .

--- Int
  --- This leads to non-termination, so it should be commented out
  *** rl < I, Sigma, Win > => < I, Sigma, Win > .

--- Identifier
  crl < X, Sigma, Win > => < Sigma(X), Sigma, Win >
    if Sigma(X) =/=Bool undefined .

--- Addition
  --- Evaluate A1, then A2: Both evaluations don't lead to an error
  crl < A1 + A2, Sigma, Win > => < I1 +Int I2, Sigma2, Win2 >
    if < A1, Sigma, Win > => < I1, Sigma1, Win1 > /\ < A2, Sigma1, Win1 > => < I2, Sigma2, Win2 > .

  --- Evaluate A2, then A1: Both evaluations don't lead to an error
  crl < A1 + A2, Sigma, Win > => < I1 +Int I2, Sigma1, Win1 >
    if < A2, Sigma, Win > => < I2, Sigma2, Win2 > /\ < A1, Sigma2, Win2 > => < I1, Sigma1, Win1 > .

  --- Evaluate A1, which leads to an error
  crl < A1 + A2, Sigma, Win > => < error, Sigma1, Win1 >
    if < A1, Sigma, Win > => < error, Sigma1, Win1 > .

  --- Evaluate A1, then A2, which leads to an error
  crl < A1 + A2, Sigma, Win > => < error, Sigma2, Win2 >
    if < A1, Sigma, Win > => < I1, Sigma1, Win1 > /\ < A2, Sigma1, Win1 > => < error, Sigma2, Win2 > .

  --- Evaluate A2, which leads to an error
  crl < A1 + A2, Sigma, Win > => < error, Sigma2, Win2 >
    if < A2, Sigma, Win > => < error, Sigma2, Win2 > .

  --- Evaluate A2, then A1, which leads to an error
  crl < A1 + A2, Sigma, Win > => < error, Sigma1, Win1 >
    if < A2, Sigma, Win > => < I2, Sigma2, Win2 > /\ < A1, Sigma2, Win2 > => < error, Sigma1, Win1 > .

--- Division
  --- Evaluate A1, then A2: Both evaluations don't lead to an error
  crl < A1 / A2, Sigma, Win > => < I1 /Int I2, Sigma2, Win2 >
    if < A1, Sigma, Win > => < I1, Sigma1, Win1 > /\ < A2, Sigma1, Win1 > => < I2, Sigma2, Win2 > /\ I2 =/=Bool 0 .

  --- Evaluate A2, then A1: Both evaluations don't lead to an error
  crl < A1 / A2, Sigma, Win > => < I1 /Int I2, Sigma1, Win1 >
    if < A2, Sigma, Win > => < I2, Sigma2, Win2 > /\ < A1, Sigma2, Win2 > => < I1, Sigma1, Win1 > /\ I2 =/=Bool 0 .

  --- Evaluate A1, which leads to an error
  crl < A1 / A2, Sigma, Win > => < error, Sigma1, Win1 >
    if < A1, Sigma, Win > => < error, Sigma1, Win1 > .

  --- Evaluate A1, then A2, which leads to an error
  crl < A1 / A2, Sigma, Win > => < error, Sigma2, Win2 >
    if < A1, Sigma, Win > => < I1, Sigma1, Win1 > /\ < A2, Sigma1, Win1 > => < error, Sigma2, Win2 > .

  --- Evaluate A2, which leads to an error
  crl < A1 / A2, Sigma, Win > => < error, Sigma2, Win2 >
    if < A2, Sigma, Win > => < error, Sigma2, Win2 > .

  --- Evaluate A2, then A1, which leads to an error
  crl < A1 / A2, Sigma, Win > => < error, Sigma1, Win1 >
    if < A2, Sigma, Win > => < I2, Sigma2, Win2 > /\ < A1, Sigma2, Win2 > => < error, Sigma1, Win1 > .

  --- Evaluate A1, then A2, which evaluates to zero
  crl < A1 / A2, Sigma, Win > => < error, Sigma2, Win2 >
    if < A1, Sigma, Win > => < I1, Sigma1, Win1 > /\ < A2, Sigma1, Win1 > => < 0, Sigma2, Win2 > .

  --- Evaluate A2 to zero
  crl < A1 / A2, Sigma, Win > => < error, Sigma2, Win2 >
    if < A2, Sigma, Win > => < 0, Sigma2, Win2 > .

  --- Evaluate A2, then A1, which evaluates to zero
  crl < A1 / A2, Sigma, Win > => < error, Sigma1, Win1 >
    if < A2, Sigma, Win > => < 0, Sigma2, Win2 > /\ < A1, Sigma2, Win2 > => < error, Sigma1, Win1 > .

--- Increment
  crl < ++ X, Sigma, Win > => < Sigma(X) +Int 1, Sigma[(Sigma(X) +Int 1) / X], Win >
    if Sigma(X) =/=Bool undefined .

--- Read
  rl < read(), Sigma, I : Win > => < I, Sigma, Win > .

--- Int
  --- This leads to non-termination, so it should be commented out
  *** rl < T, Sigma, Win > => < T, Sigma, Win > .

--- Leq
  crl < A1 <= A2, Sigma, Win > => < I1 <=Int I2, Sigma2, Win2 > 
    if < A1, Sigma, Win > => < I1, Sigma1, Win1 > /\ < A2, Sigma1, Win1 > => < I2, Sigma2, Win2 > .

  crl < A1 <= A2, Sigma, Win > => < error, Sigma1, Win1 > 
    if < A1, Sigma, Win > => < error, Sigma1, Win1 > .

  crl < A1 <= A2, Sigma, Win > => < error, Sigma2, Win2 > 
    if < A1, Sigma, Win > => < I1, Sigma1, Win1 > /\ < A2, Sigma1, Win1 > => < error, Sigma2, Win2 > .

--- Negation
  crl < ! B, Sigma, Win > => < false, Sigma', Win' >
    if < B, Sigma, Win > => < true, Sigma', Win' > .
  
  crl < ! B, Sigma, Win > => < true, Sigma', Win' >
    if < B, Sigma, Win > => < false, Sigma', Win' > .
  
  crl < ! B, Sigma, Win > => < error, Sigma', Win' >
    if < B, Sigma, Win > => < error, Sigma', Win' > .

--- Conjunction
  crl < B1 && B2, Sigma, Win > => < false, Sigma1, Win1 >
    if < B1, Sigma, Win > => < false, Sigma1, Win1 > .
  
  crl < B1 && B2, Sigma, Win > => < error, Sigma1, Win1 >
    if < B1, Sigma, Win > => < error, Sigma1, Win1 > .
  
  crl < B1 && B2, Sigma, Win > => < T, Sigma2, Win2 >
    if < B1, Sigma, Win > => < true, Sigma1, Win1 > /\ < B2, Sigma1, Win1 > => < T, Sigma2, Win2 > .
  
  crl < B1 && B2, Sigma, Win > => < error, Sigma2, Win2 >
    if < B1, Sigma, Win > => < true, Sigma1, Win1 > /\ < B2, Sigma1, Win1 > => < error, Sigma2, Win2 > .

--- Empty Block
  rl < {}, Sigma, Win > => < ok, Sigma, Win, epsilon > .

--- Block
  crl < {S}, Sigma, Win > => < signal, Sigma', Win', Wout >
    if < S, Sigma, Win > => < signal, Sigma', Win', Wout > .

--- Assignment
  crl < X = A ;, Sigma, Win > => < ok, Sigma[I / X], Win', epsilon >
    if < A, Sigma, Win > => < I, Sigma', Win' > /\ Sigma(X) =/=Bool undefined .
  
  crl < X = A ;, Sigma, Win > => < halting, Sigma', Win', epsilon >
    if < A, Sigma, Win > => < error, Sigma', Win' > .

--- Sequential
  crl < S1 S2, Sigma, Win > => < signal, Sigma2, Win2, Wout1 : Wout2 >
    if < S1, Sigma, Win > => < ok, Sigma1, Win1, Wout1 > /\ < S2, Sigma1, Win1 > => < signal, Sigma2, Win2, Wout2 > .

  crl < S1 S2, Sigma, Win > => < halting, Sigma1, Win1, Wout1 >
    if < S1, Sigma, Win > => < halting, Sigma1, Win1, Wout1 > .

--- Conditionals
  crl < if (B) S1 else S2, Sigma, Win > => < signal, Sigma1, Win1, Wout1 >
    if < B, Sigma, Win > => < true, Sigma', Win' > /\ < S1, Sigma', Win' > => < signal, Sigma1, Win1, Wout1 > .

  crl < if (B) S1 else S2, Sigma, Win > => < signal, Sigma2, Win2, Wout2 >
    if < B, Sigma, Win > => < false, Sigma', Win' > /\ < S2, Sigma', Win' > => < signal, Sigma2, Win2, Wout2 > .

  crl < if (B) S1 else S2, Sigma, Win > => < halting, Sigma', Win', epsilon >
    if < B, Sigma, Win > => < error, Sigma', Win' > .

--- While
  crl < while (B) S, Sigma, Win > => < ok, Sigma', Win', epsilon >
    if < B, Sigma, Win > => < false, Sigma', Win' > .

  crl < while (B) S, Sigma, Win > => < halting, Sigma', Win', epsilon >
    if < B, Sigma, Win > => < error, Sigma', Win' > .

  crl < while (B) S, Sigma, Win > => < signal, Sigma'', Win'', Wout >
    if < B, Sigma, Win > => < true, Sigma', Win' > /\ < S while (B) S, Sigma', Win' > => < signal, Sigma'', Win'', Wout > .

--- Print
  crl < print(A) ;, Sigma, Win > => < ok, Sigma', Win', I >
    if < A, Sigma, Win > => < I, Sigma', Win' > .

  crl < print(A) ;, Sigma, Win > => < halting, Sigma', Win', epsilon >
    if < A, Sigma, Win > => < error, Sigma', Win' > .

--- Halt
  rl < halt ;, Sigma, Win > => < halting, Sigma, Win, epsilon > .

--- Spawn
  crl < spawn S, Sigma, Win > => < signal, Sigma', Win', Wout >
    if < S, Sigma, Win > => < signal, Sigma', Win', Wout > .

  crl < spawn S1 S2, Sigma, Win > => < signal, Sigma1, Win1, Wout2 : Wout1 >
    if < S2, Sigma, Win > => < ok, Sigma2, Win2, Wout2 > /\ < S1, Sigma2, Win2 > => < signal, Sigma1, Win1, Wout1 > .

  crl < spawn S1 S2, Sigma, Win > => < halting, Sigma2, Win2, Wout2 >
    if < S2, Sigma, Win > => < halting, Sigma2, Win2, Wout2 > .

--- Local Variables
  crl < let X = A in S, Sigma, Win > => < signal, Sigma''[Sigma'(X) / X], Win'', Wout >
    if < A, Sigma, Win > => < I, Sigma', Win' > /\ < S, Sigma'[I / X], Win' > => < signal, Sigma'', Win'', Wout > .

  crl < let X = A in S, Sigma, Win > => < halting, Sigma', Win', epsilon >
    if < A, Sigma, Win > => < error, Sigma', Win' > .

--- Programs are regarded as statements in the initial state.
--- However, without any option to output, the resulting configuration
--- will always contain only an empty state and nothing else (empty indeed,
--- because all the locally declared variables are removed from the state
--- when their block ends). We also dissolve the signal
  crl < P, Win > => < Sigma, Win', Wout >
    if < P, .State, Win > => < signal, Sigma, Win', Wout > .

endm
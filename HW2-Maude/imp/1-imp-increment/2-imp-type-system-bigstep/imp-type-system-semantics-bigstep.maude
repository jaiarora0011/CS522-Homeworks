mod IMP-TYPES is
  sorts StmtType Type .  subsort StmtType < Type .
  ops block stmt : -> StmtType .
  ops int bool pgm : -> Type .
endm

mod IMP-TYPE-SYSTEM-CONFIGURATIONS-BIGSTEP is including IMP-SYNTAX + IMP-TYPES .
  sort Configuration .
  op <_,_> : AExp List{Id} -> Configuration .
  op <_,_> : BExp List{Id} -> Configuration .
  op <_,_> : Stmt List{Id} -> Configuration .
  op   <_> : Pgm -> Configuration .
  op   <_> : Type -> Configuration .
endm

mod IMP-TYPE-SYSTEM-BIGSTEP is including IMP-TYPE-SYSTEM-CONFIGURATIONS-BIGSTEP .
  var X : Id .  var Xl Xl' : List{Id} .  var I : Int .  var T : Bool .
  var A A1 A2 : AExp .  var B B1 B2 : BExp .  var S S1 S2 : Stmt .
  var ST ST1 ST2 : StmtType .

  rl < I,Xl > => < int > .
  rl < X,(Xl,X,Xl') > => < int > .
 crl < A1 + A2,Xl > => < int >
  if < A1,Xl > => < int > /\ < A2,Xl > => < int > .
 crl < A1 / A2,Xl > => < int >
  if < A1,Xl > => < int > /\ < A2,Xl > => < int > .

  rl < T,Xl > => < bool > .
 crl < A1 <= A2,Xl > => < bool >
  if < A1,Xl > => < int > /\ < A2,Xl > => < int > .
 crl < ! B,Xl > => < bool >
  if < B,Xl > => < bool > .
 crl < B1 && B2,Xl > => < bool >
  if < B1,Xl > => < bool > /\ < B2,Xl > => < bool > .

  rl < {},Xl > => < block > .
 crl < {S},Xl > => < block >
  if < S,Xl > => < ST > .
 crl < X = A ;,(Xl,X,Xl') > => < stmt >
  if < A,(Xl,X,Xl') > => < int > .
 crl < S1 S2,Xl > => < stmt >
  if < S1,Xl > => < ST1 > /\ < S2,Xl > => < ST2 > .
 crl < if (B) S1 else S2,Xl > => < stmt >
  if < B,Xl > => < bool > /\ < S1,Xl > => < block > /\ < S2,Xl > => < block > .
 crl < while (B) S,Xl > => < stmt >
  if < B,Xl > => < bool > /\ < S,Xl > => < block > .

 crl < int Xl ; S > => < pgm >
  if < S,Xl > => < ST > .

*** <new> The actual typing rule for variable increment
  rl < ++ X,(Xl,X,Xl') > => < int > .
*** </new>

endm
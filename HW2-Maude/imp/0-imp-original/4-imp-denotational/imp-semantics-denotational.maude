mod IMP-SEMANTICS-DENOTATIONAL is including IMP-SYNTAX + STATE + CPO .
  sort Syntax .
  subsorts AExp BExp Stmt Pgm < Syntax .
  subsorts Int Bool State < CPO .

  op [[_]] : Syntax  -> CPO .    --- Syntax interpreted in CPOs

  var X : Id . var Xl : List{Id} .  var I : Int .  var A1 A2 A : AExp .
  var T : Bool .  var B1 B2 B : BExp .  var S1 S2 S : Stmt .
  ops sigma alpha arg arg1 arg2 : -> CPOVar .

  --- Add new CPO constants
  --- error: denotes the value after division by zero
  --- This value is propagated through the expression,
  --- and is different from a undefined value
  --- silent and ok are singals which are propagated through the statements
  --- These denote if a silent failure occured or not
  ops error silent ok : -> CPO .

  eq [[I]] = funCPO sigma -> I .

  eq [[X]] = funCPO sigma -> _`(_`)(sigma,X) .

  --- AddError
  eq [[A1 + A2]] =
    funCPO sigma ->
      appCPO(funCPO arg1 ->
              ifCPO(arg1 ==Bool error,
			            error, appCPO(funCPO arg2 -> ifCPO(arg2 ==Bool error,
							            error,
										arg1 +Int arg2),
							   appCPO([[A2]],sigma))),
	           appCPO([[A1]],sigma)) .

  --- DivError
  eq [[A1 / A2]] =
    funCPO sigma ->
      appCPO(funCPO arg1 ->
              ifCPO(arg1 ==Bool error,
			            error, appCPO(funCPO arg2 ->
                    ifCPO(arg2 ==Bool error orBool arg2 ==Bool 0,
					                    error,
						                arg1 /Int arg2),
							   appCPO([[A2]],sigma))),
	           appCPO([[A1]],sigma)) .

  eq [[T]] = funCPO sigma -> T .

  --- LeqError
  eq [[A1 <= A2]] = 
    funCPO sigma ->
      appCPO(funCPO arg1 ->
              ifCPO(arg1 ==Bool error,
			            error, appCPO(funCPO arg2 ->
                    ifCPO(arg2 ==Bool error,
							            error,
										arg1 <=Int arg2),
							   appCPO([[A2]],sigma))),
	           appCPO([[A1]],sigma)) .

  --- NegError
  eq [[! B]] =
    funCPO sigma ->
      appCPO(funCPO arg ->
        ifCPO(arg ==Bool error,
          error, notBool arg),
      appCPO([[B]],sigma)) .

  --- AndError
  eq [[B1 && B2]] =
    funCPO sigma ->
      appCPO(funCPO arg1 ->
        ifCPO(arg1 ==Bool error orBool arg1 ==Bool false,
			            arg1,
						appCPO(funCPO arg2 ->
              ifCPO(arg2 ==Bool error,
							            error,
										arg2),
							appCPO([[B2]],sigma))),
	        appCPO([[B1]],sigma)) .

  --- For statements, the denotations will contain the state and a signal
  --- The signal is propagated and tells if there was a silent failure
  eq [[{}]] = funCPO sigma -> pairCPO(sigma,ok) .

  eq [[{S}]] = funCPO sigma -> appCPO([[S]],sigma) .

  --- AsgnError
  --- Return the same state and silently fail if there was an error in A
  eq [[X = A ;]] =
    funCPO sigma ->
      appCPO(funCPO arg ->
              ifCPO(arg ==Bool error, pairCPO(sigma, silent),
                ifCPO(_`(_`)(sigma,X) =/=Bool undefined, pairCPO(sigma[arg / X], ok), undefined)),
            appCPO([[A]],sigma)) .

  --- SeqError
  --- Do not execute S2 if there was a silent failure in S1
  eq [[S1 S2]] =
    funCPO sigma ->
      appCPO(funCPO arg1 -> ifCPO(2ndCPO(arg1) ==Bool silent, arg1, appCPO([[S2]], 1stCPO(arg1))),
        appCPO([[S1]],sigma)) .

  --- IfError
  --- Return the same state and silently fail if there was an error in B
  eq [[if (B) S1 else S2]] =
    funCPO sigma ->
      appCPO(funCPO arg -> 
        ifCPO(arg ==Bool error, pairCPO(sigma, silent),
          ifCPO(arg,appCPO([[S1]],sigma),appCPO([[S2]],sigma))),
          appCPO([[B]], sigma)) .

  --- WhileError
  --- Silently fail if there was an error in B,
  --- or if there is an error during the loop body execution
  eq [[while (B) S]] =
    fixCPO(funCPO alpha ->
      funCPO sigma ->
        appCPO(funCPO arg1 ->
          ifCPO(arg1 ==Bool error, pairCPO(sigma,silent),
								  ifCPO(arg1, appCPO(funCPO arg2 ->
                    ifCPO(2ndCPO(arg2) ==Bool silent,
											            arg2,
														appCPO(alpha,1stCPO(arg2))),
											   appCPO([[S]],sigma)),
										pairCPO(sigma,ok))),
						 appCPO([[B]],sigma))) .

  eq [[(int Xl ; S)]] = appCPO([[S]],(Xl |-> 0)) .
endm
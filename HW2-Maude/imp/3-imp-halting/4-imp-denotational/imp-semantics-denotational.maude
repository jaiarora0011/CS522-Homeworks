mod IMP-SEMANTICS-DENOTATIONAL is including IMP-SYNTAX + STATE + CPO .
  sort Syntax .
  subsorts AExp BExp Stmt Pgm < Syntax .
  subsorts Int Bool State < CPO .

  op [[_]] : Syntax  -> CPO .    --- Syntax interpreted in CPOs

  var X : Id . var Xl : List{Id} .  var I : Int .  var A1 A2 A : AExp .
  var T : Bool .  var B1 B2 B : BExp .  var S1 S2 S : Stmt .
  ops sigma alpha arg arg1 arg2 : -> CPOVar .

*** <new> Adding three new CPO constants (to act as halting signals)
  ops error halting ok : -> CPO .
***</new>

  eq [[I]] = funCPO sigma -> I .

  eq [[X]] = funCPO sigma -> _`(_`)(sigma,X) .

*** <new> Modify the denotational semantics of all language constructs to
*** propagate the error due to division by zero.  Also, modify the division
*** to generate error when division by zero in attempted
  eq [[A1 + A2]]
   = funCPO sigma
     -> appCPO(funCPO arg1
	           -> ifCPO(arg1 ==Bool error,
			            error,
						appCPO(funCPO arg2
						       -> ifCPO(arg2 ==Bool error,
							            error,
										arg1 +Int arg2),
							   appCPO([[A2]],sigma))),
	           appCPO([[A1]],sigma)) .

  eq [[A1 / A2]]
   = funCPO sigma
     -> appCPO(funCPO arg1
	           -> ifCPO(arg1 ==Bool error,
			            error,
                        appCPO(funCPO arg2
					           -> ifCPO(arg2 ==Bool error orBool arg2 ==Bool 0,
					                    error,
						                arg1 /Int arg2),
							   appCPO([[A2]],sigma))),
	           appCPO([[A1]],sigma)) .
*** </new>

  eq [[T]] = funCPO sigma -> T .

*** <new> Same as above
  eq [[A1 <= A2]]
   = funCPO sigma
     -> appCPO(funCPO arg1
	           -> ifCPO(arg1 ==Bool error,
			            error,
						appCPO(funCPO arg2
						       -> ifCPO(arg2 ==Bool error,
							            error,
										arg1 <=Int arg2),
							   appCPO([[A2]],sigma))),
	           appCPO([[A1]],sigma)) .

  eq [[! B]]
   = funCPO sigma
     -> appCPO(funCPO arg
	           -> ifCPO(arg ==Bool error,
			            error,
						notBool arg),
			   appCPO([[B]],sigma)) .

  eq [[B1 && B2]]
   = funCPO sigma
     -> appCPO(funCPO arg1
	           -> ifCPO(arg1 ==Bool error orBool arg1 ==Bool false,
			            arg1,
						appCPO(funCPO arg2
						       -> ifCPO(arg2 ==Bool error,
							            error,
										arg2),
							   appCPO([[B2]],sigma))),
	           appCPO([[B1]],sigma)) .
*** </new>

*** <new> Modify the denotational semantics of all statements to
*** 1) Return pairs (state,flag), where flag is either halting or ok.
*** 2) Propagate the error or the halting signal
  eq [[{}]] = funCPO sigma -> pairCPO(sigma,ok) .

  eq [[{S}]] = funCPO sigma -> appCPO([[S]],sigma) .  *** no need to change it

*** The equation below handles well the case when appCPO([[A]],sigma) is undefined,
*** because appCPO is defined to be undefined when its argument is undefined.
  eq [[X = A ;]]
   = funCPO sigma
     -> appCPO(funCPO arg
               -> ifCPO(arg ==Bool error,
			            pairCPO(sigma,halting),
                        ifCPO(_`(_`)(sigma,X) =/=Bool undefined,
						      pairCPO(sigma[arg / X],ok),
							  undefined)),
               appCPO([[A]],sigma)) .

  eq [[S1 S2]]
   = funCPO sigma
     -> appCPO(funCPO arg1
               -> ifCPO(2ndCPO(arg1) ==Bool halting,
			            arg1,
						appCPO([[S2]],1stCPO(arg1))),
               appCPO([[S1]],sigma)) .

  eq [[if (B) S1 else S2]]
   = funCPO sigma
     -> appCPO(funCPO arg
               -> ifCPO(arg ==Bool error,
                        pairCPO(sigma,halting),
                        ifCPO(arg,appCPO([[S1]],sigma),appCPO([[S2]],sigma))),
               appCPO([[B]],sigma)) .

  eq [[while (B) S]]
   = fixCPO(funCPO alpha
            -> funCPO sigma
               -> appCPO(funCPO arg1
			             -> ifCPO(arg1 ==Bool error,
						          pairCPO(sigma,halting),
								  ifCPO(arg1,
								        appCPO(funCPO arg2
										       -> ifCPO(2ndCPO(arg2) ==Bool halting,
											            arg2,
														appCPO(alpha,1stCPO(arg2))),
											   appCPO([[S]],sigma)),
										pairCPO(sigma,ok))),
						 appCPO([[B]],sigma))) .
*** </new>

*** <new> Modify the denotational semantics of variable declarations to
*** silently ignore the halting signal so that one sees normal termination
  eq [[(int Xl ; S)]] = 1stCPO(appCPO([[S]],(Xl |-> 0))) .
*** </new>

*** <new> The actual denotational semantics of halt
  eq [[halt ;]] = funCPO sigma -> pairCPO(sigma,halting) .
*** </new>

endm

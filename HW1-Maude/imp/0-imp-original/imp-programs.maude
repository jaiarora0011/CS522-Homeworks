mod IMP-PROGRAMS is including IMP-SYNTAX .
  ops sumPgm collatzPgm countPrimesPgm : -> Pgm .
  ops collatzStmt multiplicationStmt primalityStmt : -> Stmt .
  eq sumPgm = (
     int n, s ;
     n = 100 ;
     while (!(n <= 0)) {
       s = s + n ;
       n = n + -1 ;
     }    ) .

  eq collatzStmt = (
     while (!(n <= 1)) {
       s = s + 1 ;  q = n / 2 ;  r = q + q + 1 ;
       if (r <= n) { n = n + n + n + 1 ; } else { n = q ; }
     }     ) .

  eq collatzPgm = (
     int m, n, q, r, s ;
     m = 10 ;
     while (!(m <= 2)) {
       n = m ;
       m = m + -1 ;
       collatzStmt
     }     ) .

  eq multiplicationStmt = (        --- fast multiplication (base 2) algorithm
     z = 0 ;
     while (!(x <= 0)) {
       q = x / 2 ;
       r = q + q + 1 ;
       if (r <= x) { z = z + y ; } else {}
       x = q ;
       y = y + y ;
     }     ) .

  eq primalityStmt = (
     i = 2 ;  q = n / i ;  t = 1 ;
     while (i <= q && 1 <= t) {
       x = i ;
       y = q ;
       multiplicationStmt
       if (n <= z) { t = 0 ; } else { i = i + 1 ;  q = n / i ; }
     }     ) .

  eq countPrimesPgm = (
     int i, m, n, q, r, s, t, x, y, z ;
     m = 10 ;  n = 2 ;
     while (n <= m) {
       primalityStmt
       if (1 <= t) { s = s + 1 ; } else {}
       n = n + 1 ;
     }     ) .
endm

mod IMP-DIV-ZERO is including IMP-SYNTAX .
  ops constDiv1 constDiv2 idDiv1 idDiv2 : -> AExp .
  ops negLeq and : -> BExp .
  ops asgn seq1 seq2 iteCond ite1 ite2 whileCond whileFalse whileTrue : -> Stmt .

  eq constDiv1 = (2 / 0) .
  eq constDiv2 = (x / 0) .
  eq idDiv1 = (x / y) .
  eq idDiv2 = (x + y / z) .

  eq negLeq = (!(idDiv1 <= x)) .
  eq and = (!(x <= 2) && idDiv1 <= 10) .

  eq asgn = (x = 1 / y ;) .
  eq seq1 = (asgn x = x + 1 ;) .
  eq seq2 = (x = x + 1 ; asgn) .
  eq iteCond = (if (x / 0 <= 10) {} else {} ) .
  eq ite1 = (if (true) { x = 2 ; } else { asgn } ) .
  eq ite2 = (if (false) { x = 2 ; } else { asgn } ) .
  eq whileCond = (while (x / y <= 10) { x = 2 ; } ) .
  eq whileFalse = (while (false) { asgn } ) .
  eq whileTrue = (while (true) { asgn } ) .

endm
in builtins

mod BASIC-TYPES is
  --- Represents the set of basic types like integers and booleans.
  sort BasicType .
  ops int bool : -> BasicType .
endm

parse int .
parse bool .

mod SYSTEM-F-SYNTAX is including PL-ID + BASIC-TYPES .
  sort TypeVar .
  subsort Id < TypeVar .

  sort Type .
  subsorts BasicType TypeVar < Type .

  op _->_ : Type Type -> Type [prec 25 gather (e E)] . --- right associative
  op \/_._ : TypeVar Type -> Type [prec 50] .

  sort Var . subsort Id < Var .

  sort Exp . subsort Var < Exp .
  --- Lambda abstraction with explicit type annotations
  op /\_:_._ : Var Type Exp -> Exp [prec 50] .
  --- Lambda expression parameterized by a type variable
  op /\_._ : TypeVar Exp -> Exp [prec 50] .
  --- Lambda Application
  op __ : Exp Exp -> Exp [prec 25 gather(E e)] . --- left associative, binds tighter than lambda abstractions
  --- Type application
  op _[_] : Exp Type -> Exp [prec 20] .
  --- Polymorphic Conditional
  op cond : -> Exp .
endm

--- Parse tests for types
parse (int -> int) -> bool .
parse \/ s . s .
parse \/ s . s -> s .
parse \/ s . \/ t . s -> t .
--- Parse tests for expressions
parse /\ x : int -> int . x y .
parse /\ s . /\ x : s . x .
parse /\ s . /\ x : s . /\ y : int . x y .
parse (/\ s . /\ x : s . x)[int] .
parse (/\ s . /\ x : s . x)[int -> int] .

mod TYPE-ASSIGNMENT is including SYSTEM-F-SYNTAX .
  --- TypeVariables contains a list or a set of type variables
  sort TypeVariables . subsorts TypeVar < TypeVariables .
  op epsilon : -> TypeVariables .
  op _;_ : TypeVariables TypeVariables -> TypeVariables [assoc comm id: epsilon format(d s s d)] .

  --- TypeAssignment (TA) is a list of type assignment to variables
  --- It is a map from variables to their types
  --- It is a design choice to separate the type assignment from the list of type variables
  sort TypeAssignment .
  op _|->_ : Var Type -> TypeAssignment [prec 0] .
  op empty : -> TypeAssignment .
  op _&_ : TypeAssignment TypeAssignment -> TypeAssignment [assoc comm id: empty format(d s s d)] .

  op _(_) : TypeAssignment Var -> Type [prec 0] .          --- lookup
  op _[_/_] : TypeAssignment Type Var -> TypeAssignment [prec 0] .  --- update

  var Sigma : TypeAssignment .  var T T' : Type .  var X X' : Var .

  eq X |-> undefined = empty .                 --- "undefine" a variable in a state

  eq (Sigma & X |-> T)(X) = T .
  eq Sigma(X) = undefined [owise] .

  eq (Sigma &  X |-> T)[T' / X ] = (Sigma & X |-> T') .
  eq Sigma[T / X] = (Sigma & X |-> T) [owise] .
endm

reduce epsilon .
reduce s ; epsilon .
reduce t ; s ; t ; epsilon .

reduce empty .
reduce x |-> (int -> int) .
reduce x |-> (int -> int) & y |-> int .
reduce (x |-> (int -> int) & y |-> int)(x) .
reduce (x |-> (int -> int) & y |-> int)(z) .
reduce (x |-> (int -> int) & y |-> int)[bool / x] .
reduce (x |-> (int -> int) & y |-> int)[bool / x](x) .

mod SUBSTITUTION is
  including SYSTEM-F-SYNTAX .
  including PL-GENERIC-SUBSTITUTION .
  --- So far, only substitution on types is needed
  subsort Type < GenericTerm .
  eq bind('\/_._) = 1 .
  op _{_/_} : Type Type TypeVar -> Type [prec 0] .
  vars T1 T2 : Type .  var X : Id .
  eq T1{T2 / X} = substitute(T1, T2, X) .
endm

reduce int -> int .
reduce int{bool / s} .
reduce (s -> s){int / s} .
reduce (\/ s . s -> s){int / s} .
reduce (\/ s . s -> t){s -> s / t} .

mod FREE-VARIABLES is including TYPE-ASSIGNMENT + SUBSTITUTION .
  var S : TypeVar . var L L' : TypeVariables .

  op _in_ : TypeVar TypeVariables -> Bool .
  op union : TypeVariables TypeVariables -> TypeVariables .
  op diff : TypeVariables TypeVariables -> TypeVariables .
  op sublist : TypeVariables TypeVariables -> Bool .

  eq S in (L ; S) = true .
  eq S in L = false [owise] .

  eq union(epsilon, L) = L .
  eq union(S ; L, L') = if S in L' then union(L, L') else S ; union(L, L') fi .

  eq diff(epsilon, L) = epsilon .
  eq diff(S ; L, L') = if S in L' then diff(L, L') else S ; diff(L, L') fi .

  eq sublist(epsilon, L) = true .
  eq sublist(S ; L, L') = if S in L' then sublist(L, L') else false fi .

  op FV : Type -> TypeVariables .

  var S : TypeVar . var T T' : Type .

  eq FV(S) = S .
  eq FV(T -> T') = union(FV(T), FV(T')) .
  eq FV(\/ S . T) = diff(FV(T), S) .
endm

--- in tests
reduce s in epsilon .
reduce s in s .
reduce s in s ; t .
reduce s in s ; t ; s .
reduce s in a ; b .
--- union tests
reduce union(epsilon, epsilon) .
reduce union(epsilon, s) .
reduce union(epsilon, s ; t) .
reduce union(s ; t, t ; s) .
reduce union(a ; b, a ; x ; y) .
--- diff tests
reduce diff(epsilon, epsilon) .
reduce diff(epsilon, s ; t) .
reduce diff(s ; t, epsilon) .
reduce diff(s ; t, s) .
reduce diff(s ; t ; r, r ; a ; b) .
--- sublist tests
reduce sublist(epsilon, epsilon) .
reduce sublist(epsilon, s ; t) .
reduce sublist(s ; t, epsilon) .
reduce sublist(s ; t, s) .
reduce sublist(s ; t, t ; r ; x ; s) .
reduce sublist(s ; t ; r, r ; a ; b) .
--- FV tests
reduce FV(s) .
reduce FV(s -> s -> s) .
reduce FV(\/ s . s -> t) .
reduce FV(s -> (\/ s . s -> a)) .

mod SYSTEM-F-TYPE-SYSTEM-CONFIGURATIONS is including TYPE-ASSIGNMENT + SUBSTITUTION .
  sort Configuration .
  op <_,_,_> : TypeVariables TypeAssignment Exp -> Configuration .
  op <_> : Type -> Configuration .
endm

mod SYSTEM-F-TYPE-SYSTEM is including SYSTEM-F-TYPE-SYSTEM-CONFIGURATIONS .
  var L : TypeVariables .  var Gamma : TypeAssignment . var X : Var .
  var T T' : Type . var S : TypeVar . var E E' : Exp .

--- Variable
  --- TODO: this is only valid if free type variables in T are in L
  rl < L,  (Gamma & X |-> T), X > => < T > .

--- Variable Lambda Abstraction
  crl < L, Gamma, /\ X : T . E > => < T -> T' >
    if < L, Gamma[T / X], E > => < T' > .

--- Application
  crl < L, Gamma, (E E') > => < T' >
    if < L, Gamma, E > => < T -> T' > /\ < L, Gamma, E' > => < T > .

--- Type Abstraction
  crl < L, Gamma, (/\ S . E) > => < \/ S . T >
    if < L ; S, Gamma, E > => < T > .

--- Type Application
  crl < L, Gamma, E[T'] > => < T{T' / S} >
    if < L, Gamma, E > => < \/ S . T > .

--- Polymorphic Conditional
  rl < L, Gamma, cond > => < \/ s . bool -> s -> s -> s > .
endm

--- The identity combinator for integers
rewrite < epsilon, empty, /\ x : int . x > .
--- The K combinator for integers
rewrite < epsilon, empty, /\ x : int . /\ y : int . x > .
--- The S combinator for integers
rewrite < epsilon, empty, /\ x : int -> int -> int . /\ y : int -> int . /\ z : int . x z (y z) > .
--- The polymorphic identity combinator
rewrite < epsilon, empty, /\ s . /\ x : s . x > .
--- The polymorphic K combinator
rewrite < epsilon, empty, /\ s . /\ t . /\ x : s . /\ y : t . x > .
--- The polymorphic S combinator
rewrite < epsilon, empty, /\ s . /\ t . /\ u . /\ x : s -> t -> u . /\ y : s -> t . /\ z : s . x z (y z) > .

--- Polymorphic Church numerals
--- The type of polymorphic church numerals is (\/ s . (s -> s) -> s -> s)
---- 0
rewrite < epsilon, empty, /\ s . /\ f : s -> s . /\ z : s . z > .
---- 1
rewrite < epsilon, empty, /\ s . /\ f : s -> s . /\ z : s . f z > .
---- 2
rewrite < epsilon, empty, /\ s . /\ f : s -> s . /\ z : s . f (f z) > .

---- Successor of church numerals
rewrite < epsilon, empty, /\ n : \/ s . (s -> s) -> s -> s . /\ s . /\ f : s -> s . /\ z : s . f (n[s] f z) > .
---- Addition of church numerals
rewrite < epsilon, empty, /\ n : \/ s . (s -> s) -> s -> s . /\ m : \/ s . (s -> s) -> s -> s . /\ s . /\ f : s -> s . /\ z : s . n[s] f (m[s] f z) > .
---- Multiplication of church numerals
rewrite < epsilon, empty, /\ n : \/ s . (s -> s) -> s -> s . /\ m : \/ s . (s -> s) -> s -> s . /\ s . /\ f : s -> s . /\ z : s . n[s] (m[s] f) z > .
---- Exponentiation of church numerals
rewrite < epsilon, empty, /\ n : (\/ s . (s -> s) -> s -> s) . /\ m : (\/ s . (s -> s) -> s -> s) . /\ s . /\ f : s -> s . /\ z : s . m[s -> s] n[s] f z > .

--- Polymorphic conditional
rewrite < epsilon, empty, cond > .
rewrite < epsilon, empty, cond[int] > .
rewrite < epsilon, empty, cond[int -> int] > .
rewrite < epsilon, empty, cond[int -> bool] > .

--- The divergent combinator does not type check
rewrite < epsilon, empty, /\ x : int . x x > .
--- The polymorphic divergent combinator does not type check
rewrite < epsilon, empty, /\ s . /\ x : s . x x > .

quit
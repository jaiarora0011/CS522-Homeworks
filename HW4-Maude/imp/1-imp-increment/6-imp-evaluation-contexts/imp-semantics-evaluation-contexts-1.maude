mod IMP-SEMANTICS-EVALUATION-CONTEXTS is including IMP-SPLIT-PLUG-EVALUATION-CONTEXTS .
  var X : Id .  var I I1 I2 : Int .  var B B2 : BExp .  var S S1 S2 : Stmt .
  var Xl : List{Id} .  var Sigma : State .  var Cfg : Configuration .  var C : Context .

 crl o Cfg => plug(< C,Sigma >[Sigma(X)]) if split(Cfg) => < C,Sigma >[X]
  /\ Sigma(X) =/=Bool undefined .
 crl o Cfg => plug(C[I1 +Int I2]) if split(Cfg) => C[I1 + I2] .
 crl o Cfg => plug(C[I1 /Int I2]) if split(Cfg) => C[I1 / I2] 
  /\ I2 =/=Bool 0 .
 crl o Cfg => plug(C[I1 <=Int I2]) if split(Cfg) => C[I1 <= I2] .
 crl o Cfg => plug(C[false]) if split(Cfg) => C[! true] .
 crl o Cfg => plug(C[true]) if split(Cfg) => C[! false] .
 crl o Cfg => plug(C[B2]) if split(Cfg) => C[true && B2] .
 crl o Cfg => plug(C[false]) if split(Cfg) => C[false && B2] .
 crl o Cfg => plug(C[S]) if split(Cfg) => C[{S}] .
 crl o Cfg => plug(< C,Sigma[I / X] >[{}]) if split(Cfg) => < C,Sigma >[X = I ;]
  /\ Sigma(X) =/=Bool undefined .
 crl o Cfg => plug(C[S2]) if split(Cfg) => C[{} S2] .
 crl o Cfg => plug(C[S1]) if split(Cfg) => C[if (true) S1 else S2] .
 crl o Cfg => plug(C[S2]) if split(Cfg) => C[if (false) S1 else S2] .
 crl o Cfg => plug(C[if (B) {S while (B) S} else {}]) if split(Cfg) => C[while (B) S] .
  rl o < int Xl ; S > => < S,(Xl |-> 0) > .

*** <new> The actual RSEC of increment
 crl o Cfg => plug(< C,Sigma[(Sigma(X) +Int 1) / X] >[Sigma(X) +Int 1])
  if split(Cfg) => < C,Sigma >[++ X] /\ Sigma(X) =/=Bool undefined .
*** </new>

endm

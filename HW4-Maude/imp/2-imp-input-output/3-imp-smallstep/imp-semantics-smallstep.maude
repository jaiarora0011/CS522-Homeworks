mod IMP-CONFIGURATIONS-SMALLSTEP is including IMP-SYNTAX + STATE .

*** <new> Include the module BUFFER as well
  including BUFFER .
*** </new>

  sorts Configuration ExtendedConfiguration .
  subsort Configuration < ExtendedConfiguration .

*** <new> Add input buffers to expression configurations
  op <_,_,_> : AExp State Buffer -> Configuration .
  op <_,_,_> : BExp State Buffer -> Configuration .

*** <new> Add input and output buffers to statement configurations
  op <_,_,_,_> : Stmt State Buffer Buffer -> Configuration .
*** </new>

*** <new> Add an input buffer to initial configurations:
  op <_,_> : Pgm Buffer -> Configuration .
*** </new>
  op o_ : Configuration -> ExtendedConfiguration [prec 80] .   --- one step
  op *_ : Configuration -> ExtendedConfiguration [prec 80] .   --- all steps
  var Cfg Cfg' : Configuration .
 crl * Cfg => * Cfg' if o Cfg => Cfg' .
endm

mod IMP-SEMANTICS-SMALLSTEP is including IMP-CONFIGURATIONS-SMALLSTEP .
  var X : Id .  var Sigma Sigma' : State .  var I I1 I2 : Int .  var Xl : List{Id} .
  var A A' A1 A1' A2 A2' : AExp .  var B B' B1 B1' B2 : BExp .  var S S1 S1' S2 : Stmt .

*** <new> Add input buffer to all expression configurations, and propagate it properly
  var OmegaIn OmegaIn' OmegaOut OmegaOut' : Buffer .

 crl o < X,Sigma,OmegaIn > => < Sigma(X),Sigma,OmegaIn > if Sigma(X) =/=Bool undefined .

 crl o < A1 + A2,Sigma,OmegaIn > => < A1' + A2,Sigma,OmegaIn' > if o < A1,Sigma,OmegaIn > => < A1',Sigma,OmegaIn' > .
 crl o < A1 + A2,Sigma,OmegaIn > => < A1 + A2',Sigma,OmegaIn' > if o < A2,Sigma,OmegaIn > => < A2',Sigma,OmegaIn' > .
  rl o < I1 + I2,Sigma,OmegaIn > => < I1 +Int I2,Sigma,OmegaIn > .

 crl o < A1 / A2,Sigma,OmegaIn > => < A1' / A2,Sigma,OmegaIn' > if o < A1,Sigma,OmegaIn > => < A1',Sigma,OmegaIn' > .
 crl o < A1 / A2,Sigma,OmegaIn > => < A1 / A2',Sigma,OmegaIn' > if o < A2,Sigma,OmegaIn > => < A2',Sigma,OmegaIn' > .
 crl o < I1 / I2,Sigma,OmegaIn > => < I1 /Int I2,Sigma,OmegaIn > if I2 =/=Bool 0 .

 crl o < A1 <= A2,Sigma,OmegaIn > => < A1' <= A2,Sigma,OmegaIn' > if o < A1,Sigma,OmegaIn > => < A1',Sigma,OmegaIn' > .
 crl o < I1 <= A2,Sigma,OmegaIn > => < I1 <= A2',Sigma,OmegaIn' > if o < A2,Sigma,OmegaIn > => < A2',Sigma,OmegaIn' > .
  rl o < I1 <= I2,Sigma,OmegaIn > => < I1 <=Int I2,Sigma,OmegaIn > .

 crl o < ! B,Sigma,OmegaIn > => < ! B',Sigma,OmegaIn' > if o < B,Sigma,OmegaIn > => < B',Sigma,OmegaIn' > .
  rl o < !  true,Sigma,OmegaIn > => < false,Sigma,OmegaIn > .
  rl o < ! false,Sigma,OmegaIn > => <  true,Sigma,OmegaIn > .

 crl o < B1 && B2,Sigma,OmegaIn > => < B1' && B2,Sigma,OmegaIn' > if o < B1,Sigma,OmegaIn > => < B1',Sigma,OmegaIn' > .
  rl o < false && B2,Sigma,OmegaIn > => < false,Sigma,OmegaIn > .
  rl o <  true && B2,Sigma,OmegaIn > => < B2,Sigma,OmegaIn > .
*** </new>

*** <new> Add both input buffer and output buffer to all statement configurations below, and propagate them properly
  rl o < {S},Sigma,OmegaIn,OmegaOut > => < S,Sigma,OmegaIn,OmegaOut > .

 crl o < X = A ;,Sigma,OmegaIn,OmegaOut > => < X = A' ;,Sigma,OmegaIn',OmegaOut > if o < A,Sigma,OmegaIn > => < A',Sigma,OmegaIn' > .
 crl o < X = I ;,Sigma,OmegaIn,OmegaOut > => < {},Sigma[I / X],OmegaIn,OmegaOut > if Sigma(X) =/=Bool undefined .

 crl o < S1 S2,Sigma,OmegaIn,OmegaOut > => < S1' S2,Sigma',OmegaIn',OmegaOut' > if o < S1,Sigma,OmegaIn,OmegaOut > => < S1',Sigma',OmegaIn',OmegaOut' > .
  rl o < {} S2,Sigma,OmegaIn,OmegaOut > => < S2,Sigma,OmegaIn,OmegaOut > .

 crl o < if (B) S1 else S2,Sigma,OmegaIn,OmegaOut > => < if (B') S1 else S2,Sigma,OmegaIn',OmegaOut > if o < B,Sigma,OmegaIn > => < B',Sigma,OmegaIn' > .
  rl o < if  (true) S1 else S2,Sigma,OmegaIn,OmegaOut > => < S1,Sigma,OmegaIn,OmegaOut > .
  rl o < if (false) S1 else S2,Sigma,OmegaIn,OmegaOut > => < S2,Sigma,OmegaIn,OmegaOut > .

  rl o < while (B) S,Sigma,OmegaIn,OmegaOut > => < if (B) {S while (B) S} else {},Sigma,OmegaIn,OmegaOut > .
*** </new>

*** <new> Modified the rule for programs to initialize the state to one also including the output
  rl o < int Xl ; S,OmegaIn > => < S,(Xl |-> 0),OmegaIn,epsilon > .
*** </new>

*** <new> Added the actual small-step SOS of input/output
  rl o < read(), Sigma, I : OmegaIn > => < I, Sigma, OmegaIn > .
 crl o < print(A);,Sigma,OmegaIn,OmegaOut > => < print(A');,Sigma,OmegaIn',OmegaOut > if o < A,Sigma,OmegaIn > => < A',Sigma,OmegaIn' > .
  rl o < print(I);,Sigma,OmegaIn,OmegaOut > => < {},Sigma,OmegaIn,OmegaOut : I > .
*** </new>

endm

mod IMP-CONFIGURATIONS-MSOS is including IMP-DESUGARED-SYNTAX + STATE .

  including BUFFER .

  sorts Attribute Record Configuration ExtendedConfiguration .
  subsort Attribute < Record .
  subsort Configuration < ExtendedConfiguration .
  op empty : -> Record .
  op _,_ : Record Record -> Record [assoc comm id: empty] .
  op state`=_ : State -> Attribute .
  op input`=_  : Buffer -> Attribute [gather(&)] .  --- gather attribute only for parsing reasons
  op output`=_ : Buffer -> Attribute [gather(&)] .
  op halting`=_ : Bool -> Attribute .

  op <_,_> : AExp Record -> Configuration .
  op <_,_> : BExp Record -> Configuration .
  op <_,_> : Stmt Record -> Configuration .
  op <_,_> : Pgm Buffer -> Configuration .
  op o_ : Configuration -> ExtendedConfiguration [prec 80] .   --- one step
  op *_ : Configuration -> ExtendedConfiguration [prec 80] .   --- all steps
  var Cfg Cfg' : Configuration .
 crl * Cfg => * Cfg' if o Cfg => Cfg' .
endm

mod IMP-SEMANTICS-MSOS is including IMP-CONFIGURATIONS-MSOS .
  var X : Id .   var R R' : Record . var Sigma Sigma' : State .
  var I I1 I2 : Int .  var Xl : List{Id} .  var S S1 S1' S2 : Stmt .
  var A A' A1 A1' A2 A2' : AExp .  var B B' B1 B1' B2 B2' : BExp .
  var Win, Wout : Buffer .
  var T : Bool .
  var P : Pgm .

  crl o < X, (state = Sigma, R) > => < Sigma(X), (state = Sigma, R) >
    if Sigma(X) =/=Bool undefined .

  crl o < A1 + A2, R > => < A1' + A2, R' >
    if o < A1, R > => < A1', R' > .

  crl o < A1 + A2, R > => < A1 + A2', R' >
    if o < A2, R > => < A2', R' > .

  rl o < I1 + I2, R > => < I1 +Int I2, R > .

  crl o < A1 / A2, R > => < A1' / A2, R' >
    if o < A1, R > => < A1', R' > .

  crl o < A1 / A2, R > => < A1 / A2', R' >
    if o < A2, R > => < A2', R' > .

  crl o < I1 / I2, R > => < I1 /Int I2, R >
    if I2 =/=Bool 0 .

  --- Division by zero
  --- Changed the read value of halting to false to avoid non-termination
  rl o < I / 0, (halting = false, R) > => < I / 0, (halting = true, R) > .

  --- Increment
  crl o < ++ X, (state = Sigma, R) > => < Sigma(X) +Int 1, (state = Sigma[(Sigma(X) +Int 1) / X], R) >
    if Sigma(X) =/=Bool undefined .

  --- Read
  rl o < read(), (input = I : Win, R) > => < I, (input = Win, R) > .

  crl o < A1 <= A2, R > => < A1' <= A2, R' >
    if o < A1, R > => < A1', R' > .

  crl o < I1 <= A2, R > => < I1 <= A2', R' >
    if o < A2, R > => < A2', R' > .

  rl o < I1 <= I2, R > => < I1 <=Int I2, R > .

  crl o < ! B, R > => < ! B', R' >
    if o < B, R > => < B', R' > .

  rl o < ! true, R > => < false, R > .

  rl o < ! false, R > => < true, R > .

  crl o < B1 && B2, R > => < B1' && B2, R' >
    if o < B1, R > => < B1', R' > .

  rl o < false && B2, R > => < false, R > .

  rl o < true && B2, R > => < B2, R > .

  rl o < {S}, R > => < S, R > .

  crl o < X = A ;, R > => < X = A' ;, R' >
    if o < A, R > => < A', R' > .

  crl o < X = I ;, (state = Sigma, R) > => < {}, (state = Sigma[I / X], R) >
    if Sigma(X) =/=Bool undefined .

  crl o < S1 S2, R > => < S1' S2, R' >
    if o < S1, R > => < S1', R' > .

  rl o < {} S2, R > => < S2, R > .

  crl o < if (B) S1 else S2, R > => < if (B') S1 else S2, R' >
    if o < B, R > => < B', R'  > .

  rl o < if (true) S1 else S2, R > => < S1, R > .

  rl o < if (false) S1 else S2, R > => < S2, R > .

  rl o < while (B) S, R > => < if (B) {S while (B) S} else {}, R > .

  --- Print
  crl o < print(A);, R > => < print(A');, R' >
    if o < A, R > => < A', R' > .

  rl o < print(I);, (output = Wout, R) > => < {}, (output = (Wout : I), R) > .

  --- Halting
  --- Changed the read value of halting to false to avoid non-termination
  rl o < halt ;, (halting = false, R) > => < halt ;, (halting = true, R) > .

  op top_ : Stmt -> Stmt .
  var S' : Stmt .
  crl o < top S, (halting = false, R) > => < top S', (halting = false, R') >
    if o < S, (halting = false, R) > => < S', (halting = false, R') > .

  rl o < top {}, R > => < {}, R > .

  crl o < top S, (halting = false, R) > => < {}, (halting = false, R') >
    if o < S, (halting = false, R) > => < S', (halting = true, R') > .

  --- Spawn
  vars S2' : Stmt .
  op spawn_ : Stmt -> Stmt [ditto] .

  crl o < spawn S, R > => < spawn S', R' >
    if o < S, R > => < S', R' > .

  crl o < spawn S1 S2, R > => < spawn S1 S2', R' >
    if o < S2, R > => < S2', R' > .

  rl o < spawn {}, R > => < {}, R > .

  eq (S1 S2) S = S1 (S2 S) .

  --- rl o < int Xl ; S, Win > => < S, (state = Xl |-> 0) > .
  rl o < P, Win > => < top P, (state = .State, input = Win, output = epsilon, halting = false) > .

  --- Let rules
  crl o < let X = A in S, R > => < let X = A' in S, R' >
    if o < A,R > => < A',R' > .

  crl o < let X = I in S, (state = Sigma, R) > => < let X = Sigma'(X) in S', (state = Sigma'[Sigma(X) / X], R') >
    if o < S,(state = Sigma[I / X], R) > => < S', (state = Sigma', R') > .

  rl o < let X = I in {}, R > => < {}, R > .

endm
in ../../../builtins.maude
in ../imp-syntax.maude
in ../../state.maude

in imp-semantics-bigstep

in ../imp-programs.maude

mod TEST is including IMP-SEMANTICS-BIGSTEP + IMP-PROGRAMS .  endm

rewrite < sumPgm > .
rewrite < collatzStmt, n |-> 10 & (q,r,s) |-> 0 > .
rewrite < collatzPgm > .
rewrite < multiplicationStmt, x |-> 25 & y |-> 5 & (q,r,z) |-> 0 > .
rewrite < primalityStmt, n |-> 1021 & (i,q,r,t,x,y,z) |-> 0 > .
rewrite < countPrimesPgm > .

*** <new> The searches are going to be VERY slow, so comment them out
--- search < sumPgm > =>! Cfg:Configuration .
*** </new>

*** <new> Execute the new programs; make n = 2 in these programs, because they are VERY slow.
*** The reason they are slow is because the search space for the rewrites in conditions is huge now.
*** Big-step SOS is not really meant to be executable; we should regard it as a "search" semantics:
*** if a derivation is found then the computation is possible; it may take a lot to find the derivation.
*** The rewrites above are fast because it just happens that the normal rules are picked first by
*** Maude during its search.  However, the search above fails because it enforces complete search.
rewrite < sumHaltPgm > .
--- search  < sumHaltPgm > =>! Cfg:Configuration .

rewrite < sumDivByZeroPgm > .
--- search  < sumDivByZeroPgm > =>! Cfg:Configuration .
*** </new>

quit

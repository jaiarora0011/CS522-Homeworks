mod IMP-SEMANTICS-EVALUATION-CONTEXTS is including IMP-SPLIT-PLUG-EVALUATION-CONTEXTS .
  var X : Id .  var I I1 I2 : Int .  var B B2 : BExp .  var S S1 S2 : Stmt .
  var Xl : List{Id} .  var Sigma : State .  var Cfg Cfg' : Configuration .  var C : Context .

 crl o Cfg => Cfg' if o split(Cfg) => Cfg' .   --- generic rule enabling splitting

 crl o < C,Sigma >[X] => plug(< C,Sigma >[Sigma(X)])
  if Sigma(X) =/=Bool undefined .
  rl o C[I1 + I2] => plug(C[I1 +Int I2]) .
 crl o C[I1 / I2] => plug(C[I1 /Int I2])
  if I2 =/=Bool 0 .
  rl o C[I1 <= I2] => plug(C[I1 <=Int I2]) .
  rl o C[! true] => plug(C[false]) .
  rl o C[! false] => plug(C[ true]) .
  rl o C[true && B2] => plug(C[B2]) .
  rl o C[false && B2] => plug(C[false]) .
  rl o C[{S}] => plug(C[S]) .
 crl o < C,Sigma >[X = I ;] => plug(< C,Sigma[I / X] >[{}])
  if Sigma(X) =/=Bool undefined .
  rl o C[{} S2] => plug(C[S2]) .
  rl o C[if (true) S1 else S2] => plug(C[S1]) .
  rl o C[if (false) S1 else S2] => plug(C[S2]) .
  rl o C[while (B) S] => plug(C[if (B) {S while (B) S} else {}]) .
  rl o < int Xl ; S > => < S,(Xl |-> 0) > .
endm
                     \||||||||||||||||||/
                   --- Welcome to Maude ---
                     /||||||||||||||||||\
            Maude alpha96b built: Nov 15 2012 18:03:52
            Copyright 1997-2011 SRI International
                   Wed Mar 20 10:31:08 2013
==========================================
rewrite in TEST-SUBSTITUTION : (/\ x . /\ y . x y z)[x / z] .
rewrites: 82 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ '$1 . /\ y . '$1 y x
==========================================
rewrite in TEST-SUBSTITUTION : (/\ u . /\ x . /\ y . x y z)[x / z] .
rewrites: 96 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ u . /\ '$2 . /\ y . '$2 y x
==========================================
rewrite in TEST-SUBSTITUTION : (/\ x . x z) (/\ x . /\ y . x y z)[x / z] .
rewrites: 123 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: (/\ '$3 . '$3 x) (/\ '$4 . /\ y . '$4 y x)
==========================================
rewrite in COMBINATORY-LOGIC : S K K x .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: x
==========================================
rewrite in COMBINATORY-LOGIC : S K K (S K K) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: S K K
==========================================
rewrite in DE-BRUIJN : (/\ {0}) x .
rewrites: 6 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: x
==========================================
rewrite in DE-BRUIJN : (/\ /\ {0}) x .
rewrites: 13 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ {0}
==========================================
rewrite in DE-BRUIJN : (/\ /\ {1}) x .
rewrites: 12 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ x
==========================================
rewrite in DE-BRUIJN : (/\ /\ x {1} y) x .
rewrites: 20 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ x x y
==========================================
rewrite in DE-BRUIJN-OPTIMIZED : (/\ {0}) x .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: x
==========================================
rewrite in DE-BRUIJN-OPTIMIZED : (/\ /\ {0}) x .
rewrites: 6 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ {0}
==========================================
rewrite in DE-BRUIJN-OPTIMIZED : (/\ /\ {1}) x .
rewrites: 5 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ x
==========================================
rewrite in DE-BRUIJN-OPTIMIZED : (/\ /\ x {1} y) x .
rewrites: 9 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ x x y
==========================================
rewrite in LAMBDA : (/\ x . x) y .
rewrites: 8 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: y
==========================================
rewrite in LAMBDA : (/\ x . x) (/\ x . x) .
rewrites: 8 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ x . x
==========================================
rewrite in LAMBDA : (/\ f . (/\ x . f x) y) g .
rewrites: 48 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: g y
==========================================
rewrite in LAMBDA : (/\ z . z z) (/\ x . /\ y . x y) .
rewrites: 111 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ y . /\ '$5 . y '$5
==========================================
rewrite in LAMBDA : (/\ z . /\ a . /\ b . z a b) (a b) .
rewrites: 116 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ '$6 . /\ '$7 . a b '$6 '$7
==========================================
rewrite in LAMBDA : /\ x . x x .
rewrites: 0 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ x . x x
==========================================
rewrite in LAMBDA : /\ x . f (x x) .
rewrites: 0 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ x . f (x x)
==========================================
rewrite in CURRYING : (/\ x y z . x y z) a b .
rewrites: 84 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ z . a b z
==========================================
rewrite in CURRYING : (/\ x y z . x y z) (/\ x y z . x y z) a b .
rewrites: 328 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ z . a b z
==========================================
rewrite in CURRYING : (/\ x y z . (/\ x y z . x y z) y z) (/\ x y z . x y z) a b .
rewrites: 338 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ z . a b z
==========================================
rewrite in CHURCH-BOOLEANS : and $true $false .
rewrites: 260 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ x . /\ y . y
==========================================
rewrite in CHURCH-BOOLEANS : and (and x y) z .
rewrites: 363 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: x y (/\ x . /\ y . y) z (/\ x . /\ y . y)
==========================================
rewrite in CHURCH-BOOLEANS : and x (and y z) .
rewrites: 283 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: x (y z (/\ x . /\ y . y)) (/\ x . /\ y . y)
==========================================
rewrite in CHURCH-BOOLEANS : and (and $true y) z .
rewrites: 492 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: y z (/\ x . /\ y . y)
==========================================
rewrite in CHURCH-BOOLEANS : and $true (and y z) .
rewrites: 647 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: y z (/\ x . /\ y . y)
==========================================
rewrite in CHURCH-BOOLEANS : and (and $false y) z .
rewrites: 522 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ x . /\ y . y
==========================================
rewrite in CHURCH-BOOLEANS : and $false (and y z) .
rewrites: 358 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ x . /\ y . y
==========================================
rewrite in CHURCH-BOOLEANS : and (and $false $true) $false t f .
rewrites: 637 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: f
==========================================
rewrite in CHURCH-BOOLEANS : and $false (and $true $false) t f .
rewrites: 495 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: f
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display($5) .
rewrites: 427 in 0ms cpu (0ms real) (~ rewrites/second)
result Var: $(5)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(succ $5) .
rewrites: 974 in 0ms cpu (0ms real) (~ rewrites/second)
result Var: $(6)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(succ' $5) .
rewrites: 825 in 0ms cpu (0ms real) (~ rewrites/second)
result Var: $(6)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(succ (/\ x y . x)) .
rewrites: 481 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ k . $(1) k
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(succ' (/\ x y . x)) .
rewrites: 479 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: $(1) (/\ k . $(1) k)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(plus $5 $5) .
rewrites: 2219 in 3ms cpu (1ms real) (665766 rewrites/second)
result Var: $(10)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(plus $0 $5) .
rewrites: 1156 in 0ms cpu (0ms real) (~ rewrites/second)
result Var: $(5)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(plus (succ $5) $4) .
rewrites: 3161 in 3ms cpu (1ms real) (948394 rewrites/second)
result Var: $(10)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(succ (plus $5 $4)) .
rewrites: 2944 in 0ms cpu (1ms real) (~ rewrites/second)
result Var: $(10)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(mult $5 $5) .
rewrites: 8666 in 6ms cpu (7ms real) (1300030 rewrites/second)
result Var: $(25)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(power $5 $3) .
rewrites: 122883 in 2733ms cpu (2732ms real) (44960 rewrites/second)
result Var: $(125)
==========================================
rewrite in CHURCH-PAIRS : 1st (pair a b) .
rewrites: 309 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: a
==========================================
rewrite in CHURCH-PAIRS : 2nd (pair a b) .
rewrites: 309 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: b
==========================================
rewrite in CHURCH-PAIRS : pair (1st p) (2nd p) .
rewrites: 471 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ b . b (p (/\ x . /\ y . x)) (p (/\ x . /\ y . y))
==========================================
rewrite in CHURCH-PAIRS : 1st (pair (1st p) (2nd p)) .
rewrites: 1188 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: p (/\ x . /\ y . x)
==========================================
rewrite in CHURCH-PAIRS : 1st p .
rewrites: 45 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: p (/\ x . /\ y . x)
==========================================
rewrite in CHURCH-PAIRS : 2nd (pair (1st p) (2nd p)) .
rewrites: 1058 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: p (/\ x . /\ y . y)
==========================================
rewrite in CHURCH-PAIRS : 2nd p .
rewrites: 45 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: p (/\ x . /\ y . y)
==========================================
rewrite in CHURCH-FIBONACCI : display(fibo $4) .
rewrites: 432405 in 76ms cpu (78ms real) (5640408 rewrites/second)
result Var: $(3)
==========================================
rewrite in CHURCH-PREDECESSOR : display(pred $0) .
rewrites: 2510 in 0ms cpu (0ms real) (~ rewrites/second)
result Var: $(0)
==========================================
rewrite in CHURCH-PREDECESSOR : display(pred $1) .
rewrites: 10718 in 3ms cpu (2ms real) (3215721 rewrites/second)
result Var: $(0)
==========================================
rewrite in CHURCH-PREDECESSOR : display(pred $5) .
rewrites: 316951 in 63ms cpu (63ms real) (5004752 rewrites/second)
result Var: $(4)
==========================================
rewrite in CHURCH-SUBTRACTION : display(sub $5 $3) .
rewrites: 990946 in 183ms cpu (183ms real) (5405523 rewrites/second)
result Var: $(2)
==========================================
rewrite in CHURCH-SUBTRACTION : display(sub $3 $5) .
rewrites: 417466 in 79ms cpu (78ms real) (5218651 rewrites/second)
result Var: $(0)
==========================================
rewrite in FACTORIALS : display(factorial-untypable $2) .
rewrites: 2672146 in 479ms cpu (480ms real) (5567330 rewrites/second)
result Var: $(2)
==========================================
rewrite in FACTORIALS : display(factorial-name $2) .
rewrites: 3081612 in 543ms cpu (544ms real) (5672047 rewrites/second)
result Var: $(2)
==========================================
rewrite in FACTORIALS : display(factorial-value $2) .
rewrites: 3512724 in 623ms cpu (621ms real) (5635759 rewrites/second)
result Var: $(2)
==========================================
rewrite in FACTORIALS : display(factorial-Turing $2) .
rewrites: 2514545 in 443ms cpu (443ms real) (5672268 rewrites/second)
result Var: $(2)
==========================================
rewrite in FACTORIALS : display(factorial-Turing-value $2) .
rewrites: 2777940 in 496ms cpu (499ms real) (5593535 rewrites/second)
result Var: $(2)
==========================================
rewrite in FACTORIALS : display(factorial-Klop $2) .
rewrites: 23950493 in 11715ms cpu (11721ms real) (2044272 rewrites/second)
result Var: $(2)
==========================================
rewrite in FACTORIALS : display(factorial-fix $2) .
rewrites: 1901508 in 346ms cpu (346ms real) (5485477 rewrites/second)
result Var: $(2)
==========================================
rewrite in LAMBDA-WITH-BUILTINS : (/\ x . /\ y . + x (y 7)) 5 (/\ y . * y 3) .
rewrites: 117 in 0ms cpu (0ms real) (~ rewrites/second)
result Int: 26
==========================================
rewrite in LAMBDA-WITH-BUILTINS : (/\ x y . if x (* (y x) x) (/\ y . y x)) 3 (/\ x . * 2 x) .
rewrites: 391 in 0ms cpu (0ms real) (~ rewrites/second)
result Int: 18
==========================================
rewrite in LAMBDA-WITH-BUILTINS : (/\ x y . if x (* (y x) x) (/\ y . y x)) 0 (/\ x . * 2 x) .
rewrites: 252 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ y . y 0
==========================================
rewrite in LAMBDA-WITH-BUILTINS : (/\ x y . if x (* (y x) x) (/\ y . y x)) x (/\ x . * 2 x) .
rewrites: 164 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: if x (* (* 2 x) x) (/\ y . y x)
==========================================
rewrite in FACTORIALS-WITH-BUILTINS : factorial-untypable 10 .
rewrites: 20355 in 19ms cpu (19ms real) (1017800 rewrites/second)
result Int: 3628800
==========================================
rewrite in FACTORIALS-WITH-BUILTINS : factorial-name 10 .
rewrites: 29283 in 19ms cpu (21ms real) (1464223 rewrites/second)
result Int: 3628800
==========================================
rewrite in FACTORIALS-WITH-BUILTINS : factorial-value 10 .
rewrites: 44476 in 23ms cpu (25ms real) (1906304 rewrites/second)
result Int: 3628800
==========================================
rewrite in FACTORIALS-WITH-BUILTINS : factorial-Turing 10 .
rewrites: 15451 in 10ms cpu (9ms real) (1545100 rewrites/second)
result Int: 3628800
==========================================
rewrite in FACTORIALS-WITH-BUILTINS : factorial-Turing-value 10 .
rewrites: 20997 in 13ms cpu (12ms real) (1574932 rewrites/second)
result Int: 3628800
==========================================
rewrite in FACTORIALS-WITH-BUILTINS : factorial-Klop 2 .
rewrites: 8355922 in 4123ms cpu (4124ms real) (2026628 rewrites/second)
result Int: 2
==========================================
rewrite in FACTORIALS-WITH-BUILTINS : factorial-fix 10 .
rewrites: 16530 in 16ms cpu (17ms real) (991899 rewrites/second)
result Int: 3628800
Bye.

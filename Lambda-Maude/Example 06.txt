                     \||||||||||||||||||/
                   --- Welcome to Maude ---
                     /||||||||||||||||||\
            Maude alpha96b built: Nov 15 2012 18:03:52
            Copyright 1997-2011 SRI International
                   Wed Mar 20 10:53:14 2013
==========================================
rewrite in TEST-SUBSTITUTION : (/\ x . /\ y . x y z)[x / z] .
rewrites: 82 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ '$1 . /\ y . '$1 y x
==========================================
rewrite in TEST-SUBSTITUTION : (/\ u . /\ x . /\ y . x y z)[x / z] .
rewrites: 96 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ u . /\ '$2 . /\ y . '$2 y x
==========================================
rewrite in TEST-SUBSTITUTION : (/\ x . x z) (/\ x . /\ y . x y z)[x / z] .
rewrites: 123 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: (/\ '$3 . '$3 x) (/\ '$4 . /\ y . '$4 y x)
==========================================
rewrite in COMBINATORY-LOGIC : S K K x .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: x
==========================================
rewrite in COMBINATORY-LOGIC : S K K (S K K) .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: S K K
==========================================
rewrite in DE-BRUIJN : (/\ {0}) x .
rewrites: 6 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: x
==========================================
rewrite in DE-BRUIJN : (/\ /\ {0}) x .
rewrites: 13 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ {0}
==========================================
rewrite in DE-BRUIJN : (/\ /\ {1}) x .
rewrites: 12 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ x
==========================================
rewrite in DE-BRUIJN : (/\ /\ x {1} y) x .
rewrites: 20 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ x x y
==========================================
rewrite in DE-BRUIJN-OPTIMIZED : (/\ {0}) x .
rewrites: 2 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: x
==========================================
rewrite in DE-BRUIJN-OPTIMIZED : (/\ /\ {0}) x .
rewrites: 6 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ {0}
==========================================
rewrite in DE-BRUIJN-OPTIMIZED : (/\ /\ {1}) x .
rewrites: 5 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ x
==========================================
rewrite in DE-BRUIJN-OPTIMIZED : (/\ /\ x {1} y) x .
rewrites: 9 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: /\ x x y
==========================================
rewrite in LAMBDA : (/\ x . x) y .
rewrites: 8 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: y
==========================================
rewrite in LAMBDA : (/\ x . x) (/\ x . x) .
rewrites: 8 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ x . x
==========================================
rewrite in LAMBDA : (/\ f . (/\ x . f x) y) g .
rewrites: 48 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: g y
==========================================
rewrite in LAMBDA : (/\ z . z z) (/\ x . /\ y . x y) .
rewrites: 68 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ y . (/\ x . /\ y . x y) y
==========================================
rewrite in LAMBDA : (/\ z . /\ a . /\ b . z a b) (a b) .
rewrites: 0 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: (/\ z . /\ a . /\ b . z a b) (a b)
==========================================
rewrite in LAMBDA : /\ x . x x .
rewrites: 0 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ x . x x
==========================================
rewrite in LAMBDA : /\ x . f (x x) .
rewrites: 0 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ x . f (x x)
==========================================
rewrite in CURRYING : (/\ x y z . x y z) a b .
rewrites: 84 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ z . a b z
==========================================
rewrite in CURRYING : (/\ x y z . x y z) (/\ x y z . x y z) a b .
rewrites: 328 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ z . a b z
==========================================
rewrite in CURRYING : (/\ x y z . (/\ x y z . x y z) y z) (/\ x y z . x y z) a b .
rewrites: 338 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ z . a b z
==========================================
rewrite in CHURCH-BOOLEANS : and $true $false .
rewrites: 260 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ x . /\ y . y
==========================================
rewrite in CHURCH-BOOLEANS : and (and x y) z .
rewrites: 87 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: (/\ x . /\ y . x y (/\ x . /\ y . y)) (x y (/\ x . /\ y . y)) z
==========================================
rewrite in CHURCH-BOOLEANS : and x (and y z) .
rewrites: 178 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: (/\ y . x y (/\ x . /\ y . y)) (y z (/\ x . /\ y . y))
==========================================
rewrite in CHURCH-BOOLEANS : and (and $true y) z .
rewrites: 302 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: y z (/\ x . /\ y . y)
==========================================
rewrite in CHURCH-BOOLEANS : and $true (and y z) .
rewrites: 199 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: (/\ y . (/\ x . /\ y . x) y (/\ x . /\ y . y)) (y z (/\ x . /\ y . y))
==========================================
rewrite in CHURCH-BOOLEANS : and (and $false y) z .
rewrites: 324 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ x . /\ y . y
==========================================
rewrite in CHURCH-BOOLEANS : and $false (and y z) .
rewrites: 199 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: (/\ y . (/\ x . /\ y . y) y (/\ x . /\ y . y)) (y z (/\ x . /\ y . y))
==========================================
rewrite in CHURCH-BOOLEANS : and (and $false $true) $false t f .
rewrites: 461 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: f
==========================================
rewrite in CHURCH-BOOLEANS : and $false (and $true $false) t f .
rewrites: 502 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: f
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display($5) .
rewrites: 397 in 3ms cpu (0ms real) (119111 rewrites/second)
result Var: $(5)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(succ $5) .
rewrites: 794 in 0ms cpu (0ms real) (~ rewrites/second)
result Var: $(6)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(succ' $5) .
rewrites: 774 in 0ms cpu (0ms real) (~ rewrites/second)
result Var: $(6)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(succ (/\ x y . x)) .
rewrites: 477 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ k . $(1) k
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(succ' (/\ x y . x)) .
rewrites: 472 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: $(1) (/\ k . $(1) k)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(plus $5 $5) .
rewrites: 1619 in 0ms cpu (0ms real) (~ rewrites/second)
result Var: $(10)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(plus $0 $5) .
rewrites: 1126 in 0ms cpu (0ms real) (~ rewrites/second)
result Var: $(5)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(plus (succ $5) $4) .
rewrites: 2171 in 3ms cpu (0ms real) (651365 rewrites/second)
result Var: $(10)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(succ (plus $5 $4)) .
rewrites: 2118 in 0ms cpu (0ms real) (~ rewrites/second)
result Var: $(10)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(mult $5 $5) .
rewrites: 2492 in 3ms cpu (1ms real) (747450 rewrites/second)
result Var: $(25)
==========================================
rewrite in DISPLAY-CHURCH-NUMERALS : display(power $5 $3) .
rewrites: 10605 in 3ms cpu (5ms real) (3181818 rewrites/second)
result Var: $(125)
==========================================
rewrite in CHURCH-PAIRS : 1st (pair a b) .
rewrites: 245 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: a
==========================================
rewrite in CHURCH-PAIRS : 2nd (pair a b) .
rewrites: 245 in 0ms cpu (0ms real) (~ rewrites/second)
result Id: b
==========================================
rewrite in CHURCH-PAIRS : pair (1st p) (2nd p) .
rewrites: 93 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: (/\ x . /\ y . /\ b . b x y) (p (/\ x . /\ y . x)) (p (/\ x . /\ y . y))
==========================================
rewrite in CHURCH-PAIRS : 1st (pair (1st p) (2nd p)) .
rewrites: 93 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: (/\ p . p (/\ x . /\ y . x)) ((/\ x . /\ y . /\ b . b x y) (p (/\ x . /\ y . x)) (p (/\ x . /\ y .
    y)))
==========================================
rewrite in CHURCH-PAIRS : 1st p .
rewrites: 45 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: p (/\ x . /\ y . x)
==========================================
rewrite in CHURCH-PAIRS : 2nd (pair (1st p) (2nd p)) .
rewrites: 93 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: (/\ p . p (/\ x . /\ y . y)) ((/\ x . /\ y . /\ b . b x y) (p (/\ x . /\ y . x)) (p (/\ x . /\ y .
    y)))
==========================================
rewrite in CHURCH-PAIRS : 2nd p .
rewrites: 45 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: p (/\ x . /\ y . y)
==========================================
rewrite in CHURCH-FIBONACCI : display(fibo $4) .
rewrites: 72213 in 16ms cpu (16ms real) (4333213 rewrites/second)
result Var: $(3)
==========================================
rewrite in CHURCH-PREDECESSOR : display(pred $0) .
rewrites: 1883 in 3ms cpu (0ms real) (564956 rewrites/second)
result Var: $(0)
==========================================
rewrite in CHURCH-PREDECESSOR : display(pred $1) .
rewrites: 5848 in 0ms cpu (2ms real) (~ rewrites/second)
result Var: $(0)
==========================================
rewrite in CHURCH-PREDECESSOR : display(pred $5) .
rewrites: 71146 in 13ms cpu (14ms real) (5336083 rewrites/second)
result Var: $(4)
==========================================
rewrite in CHURCH-SUBTRACTION : display(sub $5 $3) .
rewrites: 193361 in 39ms cpu (40ms real) (4834387 rewrites/second)
result Var: $(2)
==========================================
rewrite in CHURCH-SUBTRACTION : display(sub $3 $5) .
rewrites: 72664 in 13ms cpu (15ms real) (5449936 rewrites/second)
result Var: $(0)
==========================================
rewrite in FIXED-POINT-COMBINATORS : Y-name .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ f . (/\ x . f (x x)) (/\ x . f (x x))
==========================================
rewrite in FIXED-POINT-COMBINATORS : Y-value .
rewrites: 1 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ f . (/\ x . f (/\ y . x x y)) (/\ x . f (/\ y . x x y))
==========================================
rewrite in FIXED-POINT-COMBINATORS : Y-Turing .
rewrites: 82 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ f . f ((/\ x . /\ f . f (x x f)) (/\ x . /\ f . f (x x f)) f)
==========================================
rewrite in FIXED-POINT-COMBINATORS : Y-Turing-value .
rewrites: 174 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ f . f (/\ y . (/\ x . /\ f . f (/\ y . x x f y)) (/\ x . /\ f . f (/\ y . x x f y)) f y)
==========================================
rewrite in FIXED-POINT-COMBINATORS : Y-Klop .
rewrites: 2685503 in 1353ms cpu (1351ms real) (1984491 rewrites/second)
result Val: /\ r . r ((/\ a . /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m
    . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s
    a f i x e d p o i n t c o m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i .
    /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\
    z . /\ r . r (t h i s i s a f i x e d p o i n t c o m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e .
    /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\
    v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s a f i x e d p o i n t c o m b i n a t o r)) (/\ a .
    /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\
    q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s a f i x e d p o i n t c o
    m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m
    . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s
    a f i x e d p o i n t c o m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i .
    /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\
    z . /\ r . r (t h i s i s a f i x e d p o i n t c o m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e .
    /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\
    v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s a f i x e d p o i n t c o m b i n a t o r)) (/\ a .
    /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\
    q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s a f i x e d p o i n t c o
    m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m
    . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s
    a f i x e d p o i n t c o m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i .
    /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\
    z . /\ r . r (t h i s i s a f i x e d p o i n t c o m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e .
    /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\
    v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s a f i x e d p o i n t c o m b i n a t o r)) (/\ a .
    /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\
    q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s a f i x e d p o i n t c o
    m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m
    . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s
    a f i x e d p o i n t c o m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i .
    /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\
    z . /\ r . r (t h i s i s a f i x e d p o i n t c o m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e .
    /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\
    v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s a f i x e d p o i n t c o m b i n a t o r)) (/\ a .
    /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\
    q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s a f i x e d p o i n t c o
    m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m
    . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s
    a f i x e d p o i n t c o m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i .
    /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\
    z . /\ r . r (t h i s i s a f i x e d p o i n t c o m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e .
    /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\
    v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s a f i x e d p o i n t c o m b i n a t o r)) (/\ a .
    /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\
    q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s a f i x e d p o i n t c o
    m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m
    . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s
    a f i x e d p o i n t c o m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i .
    /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\
    z . /\ r . r (t h i s i s a f i x e d p o i n t c o m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e .
    /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\
    v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s a f i x e d p o i n t c o m b i n a t o r)) (/\ a .
    /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\
    q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s a f i x e d p o i n t c o
    m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i . /\ j . /\ k . /\ l . /\ m
    . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\ z . /\ r . r (t h i s i s
    a f i x e d p o i n t c o m b i n a t o r)) (/\ a . /\ b . /\ c . /\ d . /\ e . /\ f . /\ g . /\ h . /\ i .
    /\ j . /\ k . /\ l . /\ m . /\ n . /\ o . /\ p . /\ q . /\ s . /\ t . /\ u . /\ v . /\ w . /\ x . /\ y . /\
    z . /\ r . r (t h i s i s a f i x e d p o i n t c o m b i n a t o r)) r)
==========================================
rewrite in LAMBDA-WITH-BUILTINS : (/\ x . /\ y . + x (y 7)) 5 (/\ y . * y 3) .
rewrites: 117 in 0ms cpu (0ms real) (~ rewrites/second)
result Int: 26
==========================================
rewrite in LAMBDA-WITH-BUILTINS : (/\ x y . if x (* (y x) x) (/\ y . y x)) 3 (/\ x . * 2 x) .
rewrites: 268 in 0ms cpu (0ms real) (~ rewrites/second)
result Int: 18
==========================================
rewrite in LAMBDA-WITH-BUILTINS : (/\ x y . if x (* (y x) x) (/\ y . y x)) 0 (/\ x . * 2 x) .
rewrites: 243 in 0ms cpu (0ms real) (~ rewrites/second)
result Val: /\ y . y 0
==========================================
rewrite in LAMBDA-WITH-BUILTINS : (/\ x y . if x (* (y x) x) (/\ y . y x)) x (/\ x . * 2 x) .
rewrites: 164 in 0ms cpu (0ms real) (~ rewrites/second)
result Exp: if x (* (* 2 x) x) (/\ y . y x)
Bye.
